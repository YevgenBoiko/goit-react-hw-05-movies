{"version":3,"file":"static/js/282.31208ae4.chunk.js","mappings":"oOA+BA,EA7BmB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACpB,OACE,8BACGA,GAAUA,EAAOC,OAAS,GACzB,wBACGD,EAAOE,KAAI,SAAAC,GACV,OACE,2BACE,gBACEC,IAAG,0CAAqCD,EAAME,cAC9CC,IAAI,MAEN,uBAAIH,EAAMI,QACV,sCAAcJ,EAAMK,eANbL,EAAMM,GASlB,OAGH,mEAIP,ECJD,EAhBa,WACX,OAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAOV,EAAP,KAAeW,EAAf,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAMR,OAJAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAYH,GAASI,MAAK,SAAAC,GAAQ,OAAIN,EAAUM,EAASC,KAAKC,KAA5B,GACnC,GAAE,CAACP,KAGF,+BACE,SAAC,EAAD,CAAYZ,OAAQA,KAGzB,C,+LCjBKoB,EAAO,6BACPC,EAAM,mCAECC,EAAW,mCAAG,6GAEAC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,yCACmBC,IAHnB,cAEjBJ,EAFiB,yBAMhBA,GANgB,gCAQvBO,QAAQC,MAAR,MARuB,yDAAH,qDAYXC,EAAe,mCAAG,WAAMC,GAAN,gGAEJJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,mCACaC,EADb,wCACgDM,IAH5C,cAErBV,EAFqB,yBAMpBA,GANoB,gCAQ3BO,QAAQC,MAAR,MAR2B,yDAAH,sDAYfG,EAAY,mCAAG,WAAMnB,GAAN,gGAEDc,EAAAA,EAAAA,IAAA,UAClBH,EADkB,oBACFX,EADE,oBACYY,EADZ,oBAFC,cAElBJ,EAFkB,yBAMjBA,GANiB,gCAQxBO,QAAQC,MAAR,MARwB,yDAAH,sDAYZV,EAAW,mCAAG,WAAMN,GAAN,gGAEAc,EAAAA,EAAAA,IAAA,UAClBH,EADkB,oBACFX,EADE,4BACoBY,EADpB,oBAFA,cAEjBJ,EAFiB,yBAMhBA,GANgB,gCAQvBO,QAAQC,MAAR,MARuB,yDAAH,sDAYXI,EAAc,mCAAG,WAAMpB,GAAN,gGAEHc,EAAAA,EAAAA,IAAA,UAClBH,EADkB,oBACFX,EADE,4BACoBY,EADpB,2BAFG,cAEpBJ,EAFoB,yBAMnBA,GANmB,gCAQ1BO,QAAQC,MAAR,MAR0B,yDAAH,qD","sources":["components/ActorsList/ActorsList.js","components/Cast/Cast.js","components/GetMovieInfo.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\n\nconst ActorsList = ({ actors }) => {\n  return (\n    <>\n      {actors && actors.length > 0 ? (\n        <ul>\n          {actors.map(actor => {\n            return (\n              <li key={actor.id}>\n                <img\n                  src={`https://image.tmdb.org/t/p/w200/${actor.profile_path}`}\n                  alt=\"\"\n                />\n                <p>{actor.name}</p>\n                <p>Charater: {actor.character}</p>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p>We don`t have any casts for this movie</p>\n      )}\n    </>\n  );\n};\n\nActorsList.propTypes = {\n  actors: PropTypes.arrayOf(PropTypes.shape({}).isRequired),\n};\n\nexport default ActorsList;\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { GetCastByID } from 'components/GetMovieInfo';\nimport ActorsList from 'components/ActorsList/ActorsList';\n\nconst Cast = () => {\n  const [actors, setActors] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    GetCastByID(movieId).then(response => setActors(response.data.cast));\n  }, [movieId]);\n\n  return (\n    <>\n      <ActorsList actors={actors} />\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst PATH = 'https://api.themoviedb.org';\nconst KEY = 'aae9ea2751cc0bf7dcfb9c2a2683d9fc';\n\nexport const GetTranding = async () => {\n  try {\n    const response = await axios.get(\n      `${PATH}/3/trending/movie/day?api_key=${KEY}`\n    );\n\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const GetSearchMovies = async query => {\n  try {\n    const response = await axios.get(\n      `${PATH}/3/search/movie?api_key=${KEY}&language=en-US&page=1&query=${query}`\n    );\n\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const GetMovieByID = async id => {\n  try {\n    const response = await axios.get(\n      `${PATH}/3/movie/${id}?api_key=${KEY}&language=en-US`\n    );\n\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const GetCastByID = async id => {\n  try {\n    const response = await axios.get(\n      `${PATH}/3/movie/${id}/credits?api_key=${KEY}&language=en-US`\n    );\n\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const GetReviewsByID = async id => {\n  try {\n    const response = await axios.get(\n      `${PATH}/3/movie/${id}/reviews?api_key=${KEY}&language=en-US&page=1`\n    );\n    // console.log(response);\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n};\n"],"names":["actors","length","map","actor","src","profile_path","alt","name","character","id","useState","setActors","movieId","useParams","useEffect","GetCastByID","then","response","data","cast","PATH","KEY","GetTranding","axios","console","error","GetSearchMovies","query","GetMovieByID","GetReviewsByID"],"sourceRoot":""}