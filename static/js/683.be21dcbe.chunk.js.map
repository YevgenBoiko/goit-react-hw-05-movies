{"version":3,"file":"static/js/683.be21dcbe.chunk.js","mappings":"+SAEMA,EAAO,6BACPC,EAAM,mCAECC,EAAW,mCAAG,6GAEAC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,yCACmBC,IAHnB,cAEjBG,EAFiB,yBAMhBA,GANgB,gCAQvBC,QAAQC,MAAR,MARuB,yDAAH,qDAYXC,EAAe,mCAAG,WAAMC,GAAN,gGAEJL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,mCACaC,EADb,wCACgDO,IAH5C,cAErBJ,EAFqB,yBAMpBA,GANoB,gCAQ3BC,QAAQC,MAAR,MAR2B,yDAAH,sDAYfG,EAAY,mCAAG,WAAMC,GAAN,gGAEDP,EAAAA,EAAAA,IAAA,UAClBH,EADkB,oBACFU,EADE,oBACYT,EADZ,oBAFC,cAElBG,EAFkB,yBAMjBA,GANiB,gCAQxBC,QAAQC,MAAR,MARwB,yDAAH,sDAYZK,EAAW,mCAAG,WAAMD,GAAN,gGAEAP,EAAAA,EAAAA,IAAA,UAClBH,EADkB,oBACFU,EADE,4BACoBT,EADpB,oBAFA,cAEjBG,EAFiB,yBAMhBA,GANgB,gCAQvBC,QAAQC,MAAR,MARuB,yDAAH,sDAYXM,EAAc,mCAAG,WAAMF,GAAN,gGAEHP,EAAAA,EAAAA,IAAA,UAClBH,EADkB,oBACFU,EADE,4BACoBT,EADpB,2BAFG,cAEpBG,EAFoB,yBAMnBA,GANmB,gCAQ1BC,QAAQC,MAAR,MAR0B,yDAAH,qD,oHC1B3B,EAzBoB,SAAC,GAAiB,IAAfO,EAAc,EAAdA,QACrB,OACE,8BACGA,GAAWA,EAAQC,OAAS,GAC3B,wBACGD,EAAQE,KAAI,SAAAC,GACX,OACE,2BACE,qCAAaA,EAAOC,WACpB,uBAAID,EAAOE,YAFJF,EAAON,GAKnB,OAGH,qEAIP,ECJD,EAZgB,WACd,OAA8BS,EAAAA,EAAAA,UAAS,MAAvC,eAAON,EAAP,KAAgBO,EAAhB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAMR,OAJAE,EAAAA,EAAAA,YAAU,YACRX,EAAAA,EAAAA,IAAeS,GAASG,MAAK,SAAApB,GAAQ,OAAIgB,EAAWhB,EAASqB,KAAKC,QAA7B,GACtC,GAAE,CAACL,KAEG,yBAAMR,IAAW,SAAC,EAAD,CAAaA,QAASA,KAC/C,C","sources":["components/GetMovieInfo.jsx","components/ReviewsList/ReviewsList.js","components/Reviews/Reviews.js"],"sourcesContent":["import axios from 'axios';\n\nconst PATH = 'https://api.themoviedb.org';\nconst KEY = 'aae9ea2751cc0bf7dcfb9c2a2683d9fc';\n\nexport const GetTranding = async () => {\n  try {\n    const response = await axios.get(\n      `${PATH}/3/trending/movie/day?api_key=${KEY}`\n    );\n\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const GetSearchMovies = async query => {\n  try {\n    const response = await axios.get(\n      `${PATH}/3/search/movie?api_key=${KEY}&language=en-US&page=1&query=${query}`\n    );\n\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const GetMovieByID = async id => {\n  try {\n    const response = await axios.get(\n      `${PATH}/3/movie/${id}?api_key=${KEY}&language=en-US`\n    );\n\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const GetCastByID = async id => {\n  try {\n    const response = await axios.get(\n      `${PATH}/3/movie/${id}/credits?api_key=${KEY}&language=en-US`\n    );\n\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const GetReviewsByID = async id => {\n  try {\n    const response = await axios.get(\n      `${PATH}/3/movie/${id}/reviews?api_key=${KEY}&language=en-US&page=1`\n    );\n    // console.log(response);\n    return response;\n  } catch (error) {\n    console.error(error);\n  }\n};\n","import PropTypes from 'prop-types';\n\nconst ReviewsList = ({ reviews }) => {\n  return (\n    <>\n      {reviews && reviews.length > 0 ? (\n        <ul>\n          {reviews.map(review => {\n            return (\n              <li key={review.id}>\n                <h3>Author: {review.author}</h3>\n                <p>{review.content}</p>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p>We don`t have any reviews for this movie</p>\n      )}\n    </>\n  );\n};\n\nReviewsList.propTypes = {\n  reviews: PropTypes.arrayOf(PropTypes.shape().isRequired).isRequired,\n};\n\nexport default ReviewsList;\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { GetReviewsByID } from 'components/GetMovieInfo';\nimport ReviewsList from 'components/ReviewsList/ReviewsList';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    GetReviewsByID(movieId).then(response => setReviews(response.data.results));\n  }, [movieId]);\n\n  return <div>{reviews && <ReviewsList reviews={reviews} />}</div>;\n};\n\nexport default Reviews;\n"],"names":["PATH","KEY","GetTranding","axios","response","console","error","GetSearchMovies","query","GetMovieByID","id","GetCastByID","GetReviewsByID","reviews","length","map","review","author","content","useState","setReviews","movieId","useParams","useEffect","then","data","results"],"sourceRoot":""}